/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IOL_ProjectPackage;


import java.awt.BorderLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.channels.SelectableChannel;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JViewport;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.awt.Component;
import java.awt.Dimension;
import java.io.BufferedWriter;
import java.lang.reflect.Array;
import java.util.Arrays;  
import java.util.List;  
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JTextArea;
/**
 *
 * @author Almira
 */

class IOL_GUI extends javax.swing.JFrame{
    private final JFileChooser openFile;
    private static JScrollPane CodeEditorScrollPane = new JScrollPane();
    private static String filePath = "";
    private static int tabInd; 
    int lineNumber;
    
    boolean errFlag = false; 
    boolean compileFlag = false;
    
    static ArrayList<String> AllLexemes = new ArrayList<>(Arrays.asList("IOL", "LOI", "NEWLN", "IS", "INTO", "BEG", "PRINT", "INT", "STR", "ADD","SUB" ,"MULT", "MOD", "DIV"));
    static ArrayList<String> ListOfTokens = new ArrayList<>();
    static List<String> varNames = new ArrayList<>();
    static List<String> IntvarNames = new ArrayList<>();
    static List<String> StrvarNames = new ArrayList<>();
    
    static List<String> AllKeywords = Arrays.asList("INT","STR","IS","INTO","IS","BEG","PRINT","NEWLN");   
    static List<String> AllOPR = Arrays.asList("MOD","DIV", "MULT","SUB", "ADD"); //arith operation
    static List<String> ERR_LEX = new ArrayList<>();
    
    
    public IOL_GUI() {
        initComponents();
        
        openFile = new JFileChooser();
        openFile.setFileFilter(new FileNameExtensionFilter("IOL Files (*.iol)", "iol"));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        ConsoleTxtArea = new javax.swing.JTextArea();
        EditorTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        CodeEditorTxtArea = new javax.swing.JTextArea();
        TokenizerTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        VariableTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        TokenTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        NewMenuItem = new javax.swing.JMenuItem();
        OpenMenuItem = new javax.swing.JMenuItem();
        SaveMenuItem = new javax.swing.JMenuItem();
        SaveAsMenuItem = new javax.swing.JMenuItem();
        CloseTabMenuItem = new javax.swing.JMenuItem();
        RuntMenu = new javax.swing.JMenu();
        CompileMenuItem = new javax.swing.JMenuItem();
        TokenizedMenuItem = new javax.swing.JMenuItem();
        ExecuteMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ConsoleTxtArea.setColumns(20);
        ConsoleTxtArea.setRows(5);
        jScrollPane2.setViewportView(ConsoleTxtArea);

        CodeEditorTxtArea.setColumns(20);
        CodeEditorTxtArea.setRows(5);
        jScrollPane1.setViewportView(CodeEditorTxtArea);

        EditorTabbedPane.addTab("Untitled Tab", jScrollPane1);

        VariableTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Variable", "Values"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(VariableTable);

        TokenizerTabbedPane.addTab("Variables", jScrollPane4);

        TokenTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TokenTable);

        TokenizerTabbedPane.addTab("Lexeme Token", jScrollPane3);

        FileMenu.setText("File");
        FileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuActionPerformed(evt);
            }
        });

        NewMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        NewMenuItem.setText("New File");
        NewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(NewMenuItem);

        OpenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenMenuItem.setText("Open File");
        OpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(OpenMenuItem);

        SaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveMenuItem.setText("Save File");
        SaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(SaveMenuItem);

        SaveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        SaveAsMenuItem.setText("Save As..");
        SaveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(SaveAsMenuItem);

        CloseTabMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.SHIFT_MASK));
        CloseTabMenuItem.setText("Close Tab");
        CloseTabMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseTabMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(CloseTabMenuItem);

        jMenuBar1.add(FileMenu);

        RuntMenu.setText("Run");

        CompileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        CompileMenuItem.setText("Compile Code");
        CompileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompileMenuItemActionPerformed(evt);
            }
        });
        RuntMenu.add(CompileMenuItem);

        TokenizedMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        TokenizedMenuItem.setText("Show Tokenized Code");
        TokenizedMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TokenizedMenuItemActionPerformed(evt);
            }
        });
        RuntMenu.add(TokenizedMenuItem);

        ExecuteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        ExecuteMenuItem.setText("Execute Code");
        ExecuteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteMenuItemActionPerformed(evt);
            }
        });
        RuntMenu.add(ExecuteMenuItem);

        jMenuBar1.add(RuntMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(EditorTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TokenizerTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(EditorTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(TokenizerTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        EditorTabbedPane.getAccessibleContext().setAccessibleName("Untitled Tab");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FileMenuActionPerformed

    private void OpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuItemActionPerformed
        // TODO add your handling code here:
        int returnVal = openFile.showOpenDialog(this);
        String fName;
        
        switch(returnVal){
            case JFileChooser.CANCEL_OPTION:
                break;
            
            case JFileChooser.APPROVE_OPTION:
                File f = openFile.getSelectedFile();
                fName = f.getName();
                
                if(f.getName().toLowerCase().endsWith(".iol")){
                    try{
                        filePath = f.getCanonicalPath();
                        createNewTab(fName);
                        BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
                        CodeEditorTxtArea.read(in, evt);
                        LineNumberSetter(CodeEditorTxtArea, jScrollPane1);
                    } catch(IOException ex){}
                }else{
                    JOptionPane.showMessageDialog(null, "File type not compatible.");
                }
                break;
        }
    }//GEN-LAST:event_OpenMenuItemActionPerformed

    private void NewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewMenuItemActionPerformed
        // TODO add your handling code here:
        String tabTitle = "Untitled Tab";
        createNewTab(tabTitle);
    }//GEN-LAST:event_NewMenuItemActionPerformed
    
    private void SaveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsMenuItemActionPerformed
        // TODO add your handling code here:
        savingFile();
    }//GEN-LAST:event_SaveAsMenuItemActionPerformed

    private void SaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuItemActionPerformed
        // TODO add your handling code here:
        savingFile();
    }//GEN-LAST:event_SaveMenuItemActionPerformed

    private void CloseTabMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseTabMenuItemActionPerformed
        // TODO add your handling code here:
        Component selectedTab = EditorTabbedPane.getSelectedComponent();
        if(selectedTab != null){
            EditorTabbedPane.remove(selectedTab);
        }
    }//GEN-LAST:event_CloseTabMenuItemActionPerformed
    
    private void CompileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompileMenuItemActionPerformed
        // TODO add your handling code here:
        /*
            This method checks if IOL code has syntax/semantic/lexical errors. If errors are found, it displays
            error messages on the console and the program should not be executed. It will also find and classify
            the lexemes and the variables used which will be displayed on the tables.
        */
        //refreshes list and text area contents
        ConsoleTxtArea.setText("");
        ERR_LEX.clear(); varNames.clear(); IntvarNames.clear(); StrvarNames.clear();
        
        tabInd = EditorTabbedPane.getSelectedIndex();
        String filename = EditorTabbedPane.getTitleAt(tabInd);
        
        String[] readLines = readTextArea();
        if(readLines == null){
            JOptionPane.showMessageDialog(null, "Nothing to compile.");
            return;
        }
        if(filename.equals("Untitled Tab")){
            JOptionPane.showMessageDialog(null, "Save file first.");
            return;
        }
        
        List<String> list = new ArrayList<>();
        List<String> IOL_LOICheck = new ArrayList<>();
        String delim = " ";
        String str = String.join(delim, readLines);
        
        String words[] = str.split("\\s+");
        IOL_LOICheck = ErrorChecker.stringArr(words, ConsoleTxtArea);
        
        if(!IOL_LOICheck.isEmpty()){
            //errors found, cannot execute program
        }
        list = Arrays.asList(readLines);
        
        int ctr = 1;
        List<String> n = new ArrayList<>();
        while(ctr < list.size()-1){
            String newStr = list.get(ctr).trim();
            ERR_LEX = ErrorChecker.getErrors(newStr, ConsoleTxtArea, AllKeywords, AllOPR, varNames, IntvarNames, StrvarNames, ctr);
            ctr++;
        }
        Tokenizer(words);
        TknToFile(ListOfTokens);

        if(!IOL_LOICheck.isEmpty()&& ERR_LEX.isEmpty()){
            compileFlag = true;
        }
    }//GEN-LAST:event_CompileMenuItemActionPerformed
    
    
    private void ExecuteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteMenuItemActionPerformed
        // TODO add your handling code here:
        //Executes compiled source code in the editor code. Will only execute if no errors are found.
        
        ConsoleTxtArea.setText("");
        if(errFlag == true){
            JOptionPane.showMessageDialog(null, "Errors found! Cannot execute file.");
            return;
        }
        if(compileFlag == false){
            JOptionPane.showMessageDialog(null, "Cannot execute, compile code/resolve errors first.");
            return;
        }
        
        tabInd = EditorTabbedPane.getSelectedIndex();
        String filename = EditorTabbedPane.getTitleAt(tabInd);
        ConsoleTxtArea.append(filename + " compiled with no errors found. \nProgram " + filename + " will now be executed...\n\n");
        
        String[] sentenceLines = readTextArea();
        if(sentenceLines == null){
            JOptionPane.showMessageDialog(null, "Nothing to execute.");
            return;
        }
       
        String output;
        
        //Arrays, Lists, Arraylists, Stack, Hashmaps DECLARATIONS START--------------------------------
        String[] DT = new String[]{"INT","STR"}; //datatypes
        List<String> AllDT = Arrays.asList(DT);
        
        ArrayList<Integer> val = new ArrayList<>();//list of int assigned values
        ArrayList<String> sval = new ArrayList<>();//list of string assigned values
        ArrayList<String> svar = new ArrayList<>(); //list of string variables
        ArrayList<String> ivar = new ArrayList<>(); //list of integer variables
//        List<String> VarFound = new ArrayList<>(); //list of variables names
        
        varNames.clear();
        
        Stack<String> ArithOPR = new Stack<>();
        
        HashMap<String,Integer> varval = new HashMap<>();//hashmap for (varname, assigned value)
        HashMap<String,String> svarval = new HashMap<>();//hasmap for (varname, assgined value)
        HashMap<String, ArrayList<String>> dtsvarval = new HashMap<>(); //hashmap for varnames and their corresponding data type
        
        ArrayList<String> inputlines = new ArrayList<>();
        ArrayList <ArrayList<String>> PWord=new ArrayList <>();//per word 
        //DECLARATIONS END------------------------------
        
        int i = 0;
        while(i != sentenceLines.length){
            inputlines.add(sentenceLines[i]);
            i++;
        }
        
        //FOR LOOP that reads every word in every line (element) in inputLines arraylist
        for(int a=0; a < inputlines.size(); a++){
            //save per word in a line
            String woo[] = inputlines.get(a).split("\\s+");
            ArrayList <String> perword = new ArrayList <>();

            perword.addAll(Arrays.asList(woo));
            PWord.add(perword);//Main arraylist
        }
        //FOR LOOP - reads every line and read every word inside line
        for(int a = 0; a < inputlines.size(); a++){
            int b = 0;
            
            //WHILE LOOP for every word read
            while(PWord.get(a).size() > b) {
                //DEFINING VARIABLES
                //INT/STR read
                ArrayList<String> readWord = PWord.get(a);
                if(!AllDT.contains(readWord.get(b))){
                    //Enters function that reads words that are: NEWLN, IS, INTO, BEG, PRINT
                    output = ExecuteFunctions.ProgramOperations(ArithOPR, AllOPR, readWord, b, varNames, dtsvarval, sval, svarval, val, varval);
                    ConsoleTxtArea.append(output);
                }
                //Checks variable datatypes
                else ExecuteFunctions.CheckDataType(readWord, b, varNames, dtsvarval, sval, svar, svarval, val, ivar, varval);
                
                //---DO NOT REMOVE---
                if(readWord.size()!=b){
                    b++;
                } else break;   
            }
        }
        ConsoleTxtArea.append("\n\nProgram terminated successfully...");
    }//GEN-LAST:event_ExecuteMenuItemActionPerformed

    private void TokenizedMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TokenizedMenuItemActionPerformed
        // TODO add your handling code here:
        //CODE SHOULD COMPILE FIRST BEFORE TOKENIZED CAN BE DONE
        
        tabInd = EditorTabbedPane.getSelectedIndex();
        String[] readLines = readTextArea();
        
        JTextArea TokenTxtArea = (JTextArea)(((JScrollPane) EditorTabbedPane.getComponent(tabInd)).getViewport()).getComponent(0);
        JFrame TknzdCode = new JFrame("Show Tokenized Code");
        TknzdCode.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        TknzdCode.setPreferredSize(new Dimension(800, 600));
        TknzdCode.pack();
        TknzdCode.setLocationRelativeTo(null);
        TknzdCode.setVisible(true);
        
        TokenTxtArea = new JTextArea(5, 10);
        TokenTxtArea.setEditable(false);
        TokenTxtArea.setSize(700, 500);
        TokenTxtArea.setWrapStyleWord(true);
        TokenTxtArea.setText("");
        
        JScrollPane scrollPane = new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
        JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        TknzdCode.add(scrollPane, BorderLayout.CENTER);
        scrollPane.getViewport().add(TokenTxtArea);
        scrollPane.setDoubleBuffered(true);
        
        for (String readLine : readLines) {
            String[] word = readLine.split("\\s+");
            
            for (String wordX : word) {
                if(wordX.isEmpty()) TokenTxtArea.append("\t");
                else if(ListOfTokens.contains(wordX)) TokenTxtArea.append(wordX + " ");
                else if(isVar(wordX) && varNames.contains(wordX)) TokenTxtArea.append("IDENT ");
                else if(isInteger(wordX)) TokenTxtArea.append("INT_LIT ");
                else TokenTxtArea.append("ERR_LEX ");
                
            }
            TokenTxtArea.append("\n");
        }
    }//GEN-LAST:event_TokenizedMenuItemActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IOL_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IOL_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IOL_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IOL_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new IOL_GUI().setVisible(true);
            LineNumberSetter(CodeEditorTxtArea, jScrollPane1);
        });
        
    }
    
    //Start of GUI menu actions methods here ------------------------------------------
    public JTabbedPane createNewTab(String tabName){
        JTextArea NewTabTxtArea = new JTextArea();
        JScrollPane NewScrollPane = new JScrollPane(NewTabTxtArea);
        
        EditorTabbedPane.addTab(tabName, NewScrollPane);
        CodeEditorTxtArea = NewTabTxtArea;
        jScrollPane1 = NewScrollPane;
        LineNumberSetter(CodeEditorTxtArea, jScrollPane1);
        return EditorTabbedPane;
    }
    
    public void getTextFromEditor(){
        CodeEditorScrollPane = (JScrollPane)EditorTabbedPane.getSelectedComponent();
        JViewport jview = (JViewport)CodeEditorScrollPane.getComponent(0);
        CodeEditorTxtArea = (JTextArea)jview.getComponent(0);
    }
    
    public void savingFile(){
        String fileName;
        String editorTxt;
        tabInd = EditorTabbedPane.getSelectedIndex();
        getTextFromEditor();
        
        JFileChooser sf = new JFileChooser();
        sf.setCurrentDirectory(new File(filePath));
        
        sf.setSelectedFile(new File("Untitled.iol"));
        
        int r = sf.showSaveDialog(this);
        File f = new File(sf.getSelectedFile().toString());
        
        //OVERWRITES A FILE IF IT ALREADY EXISTS
        switch(r){
            case JFileChooser.CANCEL_OPTION:
                break;
                    
            case JFileChooser.APPROVE_OPTION:
                try{
                    File fi = sf.getSelectedFile();
                    if(fi.exists()){
                        int overwrite = JOptionPane.showConfirmDialog(null, "File already exists."
                                + " Overwrite file?", "Confirm", 
                                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                        if(overwrite == JOptionPane.YES_OPTION){
                            try{
                            //gets tab title
                            FileWriter fw = new FileWriter(f);
                            editorTxt = CodeEditorTxtArea.getText();
                            fw.write(editorTxt);
                            fileName = f.getName();
                            EditorTabbedPane.setTitleAt(tabInd, fileName);
                            fw.close();
                            JOptionPane.showMessageDialog(null, "File successfully saved!");
                        }catch(IOException e){}    
                        }
                    }
                    else{
                        try{
                            //gets tab title
                            FileWriter fw = new FileWriter(f);
                            editorTxt = CodeEditorTxtArea.getText();
                            fw.write(editorTxt);
                            fileName = f.getName();
                            EditorTabbedPane.setTitleAt(tabInd, fileName);
                            fw.close();
                            JOptionPane.showMessageDialog(null, "File successfully saved!");
                        }catch(IOException e){}     
                    }
                }catch (Exception e){}
            break;
        }
    }
    
    public static void LineNumberSetter(JTextArea SetLineNumber, JScrollPane SetScrollPane){
        LineNumberingForEditor lineNumberingTextArea = new LineNumberingForEditor(SetLineNumber);
        SetScrollPane.setRowHeaderView(lineNumberingTextArea);

        SetLineNumber.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent documentEvent){
                lineNumberingTextArea.updateLineNumbers();
                
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent){
                lineNumberingTextArea.updateLineNumbers();
            }

            @Override
            public void changedUpdate(DocumentEvent documentEvent){
                lineNumberingTextArea.updateLineNumbers();
            }
        });
    }
    //End of GUI menu actions methods here ------------------------------------------
    
    
    //Start of compile and execute methods here -------------------------------------
    public String[] readTextArea(){
        //FUNCTION READS LINES IN TEXT AREA
        String[] sentenceLines = null;  
        tabInd = EditorTabbedPane.getSelectedIndex();
        
        //CHECKS IF THERE IS TEXT IN CODEEDITOR TO COMPILE
        JTextArea ExecTextArea = (JTextArea)(((JScrollPane)EditorTabbedPane.getComponent(tabInd)).getViewport()).getComponent(0);
        if(ExecTextArea.getText().trim().isEmpty() == false){
            sentenceLines = ExecTextArea.getText().split("\\n");
        }
        return sentenceLines;
    }
    
    public void TknToFile(ArrayList<String> Tokens){
        //creates .tkn file
        tabInd = EditorTabbedPane.getSelectedIndex();
        String filename = EditorTabbedPane.getTitleAt(tabInd);
        
        if(filename.equals("Untitled Tab")){
            JOptionPane.showMessageDialog(null, "Save file first.");
        }
        else{
            File file = new File(filePath.replace(".iol", ".tkn"));

            try {
                FileWriter w = new FileWriter(file);

                for(int i = 0; i < Tokens.size(); i++){
                    w.append(Tokens.get(i) + "\n");
                }
                w.close();
                JOptionPane.showMessageDialog(null, filename.replace(".iol", ".tkn") + " File created");
            } catch (IOException ex) {
                Logger.getLogger(IOL_GUI.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
    }
    
    public static void Tokenizer(String[] words){
        //loops through sentenclines, reads through the code and categorizes it
        ListOfTokens.clear(); 
        
        ArrayList<String> Keywords = new ArrayList<>(); 
        ArrayList<String> IDENT = new ArrayList<>();
        
        HashMap<String, String> VarAndVal = new HashMap<>();
        
        DefaultTableModel TknTable = (DefaultTableModel)TokenTable.getModel();
        DefaultTableModel VarValTable = (DefaultTableModel)VariableTable.getModel();
        Object tokenRow[] = new Object[2];
        Object varRow[] = new Object[2];
        
        TknTable.setRowCount(0); //removes all rows of previous tokenized code
        VarValTable.setRowCount(0);
        
        for(int a = 0; a < words.length; a++){
            int b = 0;
             
            if(words[a].isEmpty()){
                //do nothing
            }
            //IF WORD READ IS A KEYWORD
            else if(AllLexemes.contains(words[a])){
                if(Keywords.contains(words[a]) == false){
                    Keywords.add(words[a]);
                    tokenRow[0] = words[a];   //STORES varname
                    tokenRow[1] = words[a];   //store vartype
                    TknTable.addRow(tokenRow);
                }
                ListOfTokens.add(words[a]);
            }
            //If word read is not a keyword, is a variable, and is not a 'preTokens' (keywords with error)
            else if(Keywords.contains(words[a]) == false && isVar(words[a]) && ERR_LEX.contains(words[a]) == false){
                //if word is variable and has not yet been stored in IDENT (avoids multiple entries)
                if(IDENT.contains(words[a]) == false){
                    //checks if current word was an initialized string, prints name and value in VarVal Table
                    if(words[a-1].equals("STR")){
                        VarAndVal.put(words[a], "");
                        varRow[0] = words[a];
                        varRow[1] = VarAndVal.get(words[a]);
                        VarValTable.addRow(varRow);
                    }
                    IDENT.add(words[a]);
                    tokenRow[0] = words[a];
                    tokenRow[1] = "IDENT";
                    TknTable.addRow(tokenRow);
                    ListOfTokens.add("IDENT");
                }
                //if IDENT has been read, code will store in arraylist for recording 
                else ListOfTokens.add("IDENT");
            }
            //IF WORD READ IS INTEGER
            else if(isInteger(words[a])==true){
                //INT(a-3) IDENT(a-2) IS(a-1) INT_LIT(a)
                if(IDENT.contains(words[a-2]) && words[a-3].equals("INT")){
                    VarAndVal.put(words[a-2], words[a]);
                    varRow[0] = words[a-2];
                    varRow[1] = VarAndVal.get(words[a-2]);
                    VarValTable.addRow(varRow);
                }
                tokenRow[0] = words[a];
                tokenRow[1] = "INT_LIT";
                TknTable.addRow(tokenRow);
                ListOfTokens.add("INT_LIT");
            }
            //IF WORD IS NOT A KEYWORD, IDENT, OR INT_LIT
            else if (ERR_LEX.contains(words[a])){
                tokenRow[0] = words[a];
                tokenRow[1] = "ERR_LEX";
                TknTable.addRow(tokenRow);
                ListOfTokens.add("ERR_LEX");
            }
            if(words.length != b){
                b++;
            } else break;   
        }
    }
    
    //FUNCTIONS BELOW DEALS WITH CODE EXECUTION
    static boolean checkSpecialChar(char ch) {
        char[] specialCh = {'!','@',']','#','$','%','^','&','*','-','.'}; 
        
        for (Character c : specialCh) {
            if (ch == c) return true;
        }
        return false;
    }
    
    public static boolean isInteger(String str) {
        int flag=1;
        if (str == null) return false;
        
        int length = str.length();
        if (length == 0) return false;
        
        int i = 0;
        if (str.charAt(0) == '-') {
            if (length == 1) return false;
            i = 1;
        }
        for (; i < length; i++) {
            char c = str.charAt(i);

            if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')||c == '.'||checkSpecialChar(c)==true) {
                flag=0;
            }
        }
        return flag != 0;
    } 
    
    public static boolean isVar(String str) {
        int i = 1;
  
        if(checkSpecialChar(str.charAt(0)) == false && (str.charAt(0) >= 'a' || str.charAt(0) <= 'z'|| 
                str.charAt(0)>= 'A' || str.charAt(0) <= 'Z')&&!(str.charAt(0) == '0' || str.charAt(0) <= '9')){
            for (; i < str.length(); i++) {
                char c = str.charAt(i);
                
                if (c >= '0' || c <= '9'||c >= 'a' || c <= 'z'|| c >= 'A' || c <= 'Z') {
                    if(i==str.length()-1) return true;
                }
                if(checkSpecialChar(c)==true) return false;
             }
        }
        else return false;
        return false;
    }
    //End of compile and execute methods here -------------------------------------

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CloseTabMenuItem;
    private static javax.swing.JTextArea CodeEditorTxtArea;
    private javax.swing.JMenuItem CompileMenuItem;
    private static javax.swing.JTextArea ConsoleTxtArea;
    private javax.swing.JTabbedPane EditorTabbedPane;
    private javax.swing.JMenuItem ExecuteMenuItem;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem NewMenuItem;
    private javax.swing.JMenuItem OpenMenuItem;
    private javax.swing.JMenu RuntMenu;
    private javax.swing.JMenuItem SaveAsMenuItem;
    private javax.swing.JMenuItem SaveMenuItem;
    private static javax.swing.JTable TokenTable;
    private javax.swing.JMenuItem TokenizedMenuItem;
    private javax.swing.JTabbedPane TokenizerTabbedPane;
    private static javax.swing.JTable VariableTable;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private static javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
