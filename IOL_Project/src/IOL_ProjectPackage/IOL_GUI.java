/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IOL_ProjectPackage;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.channels.SelectableChannel;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JViewport;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.awt.Component;
import java.util.Arrays;  
import java.util.List;  
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;
import javax.swing.JTextArea;
/**
 *
 * @author Almira
 */

class IOL_GUI extends javax.swing.JFrame{
    private final JFileChooser openFile;
    private static JScrollPane CodeEditorScrollPane = new JScrollPane();
    private String filePath = "";
    private int tabInd; 
    
    ArrayList<String> AllLexemes = new ArrayList<>(Arrays.asList("IOL", "LOI", "NEWLN", "IS", "INTO", "BEG", "PRINT", "INT", "STR", "ADD","SUB" ,"MULT", "MOD", "DIV"));
    String[] OPR = new String[]{"MOD","DIV", "MULT","SUB", "ADD",}; //arith operation
    List<String> var = new ArrayList<>(); //list of variables names
    List<String> AllOPR = Arrays.asList(OPR);
    
    public IOL_GUI() {
        initComponents();
        
        openFile = new JFileChooser();
        openFile.setFileFilter(new FileNameExtensionFilter("IOL Files (*.iol)", "iol"));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        ConsoleTxtArea = new javax.swing.JTextArea();
        TabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        CodeEditorTxtArea = new javax.swing.JTextArea();
        TokenizerTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        VariableTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        TokenTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        NewMenuItem = new javax.swing.JMenuItem();
        OpenMenuItem = new javax.swing.JMenuItem();
        SaveMenuItem = new javax.swing.JMenuItem();
        SaveAsMenuItem = new javax.swing.JMenuItem();
        CloseTabMenuItem = new javax.swing.JMenuItem();
        RuntMenu = new javax.swing.JMenu();
        CompileMenuItem = new javax.swing.JMenuItem();
        TokenizedMenuItem = new javax.swing.JMenuItem();
        ExecuteMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ConsoleTxtArea.setColumns(20);
        ConsoleTxtArea.setRows(5);
        jScrollPane2.setViewportView(ConsoleTxtArea);

        CodeEditorTxtArea.setColumns(20);
        CodeEditorTxtArea.setRows(5);
        jScrollPane1.setViewportView(CodeEditorTxtArea);

        TabbedPane.addTab("Untitled Tab", jScrollPane1);

        VariableTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Variable", "Values"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(VariableTable);

        TokenizerTabbedPane.addTab("Variables", jScrollPane4);

        TokenTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TokenTable);

        TokenizerTabbedPane.addTab("Lexeme Token", jScrollPane3);

        FileMenu.setText("File");
        FileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuActionPerformed(evt);
            }
        });

        NewMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        NewMenuItem.setText("New File");
        NewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(NewMenuItem);

        OpenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenMenuItem.setText("Open File");
        OpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(OpenMenuItem);

        SaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveMenuItem.setText("Save File");
        SaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(SaveMenuItem);

        SaveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        SaveAsMenuItem.setText("Save As..");
        SaveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(SaveAsMenuItem);

        CloseTabMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.SHIFT_MASK));
        CloseTabMenuItem.setText("Close Tab");
        CloseTabMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseTabMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(CloseTabMenuItem);

        jMenuBar1.add(FileMenu);

        RuntMenu.setText("Run");

        CompileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        CompileMenuItem.setText("Compile Code");
        CompileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompileMenuItemActionPerformed(evt);
            }
        });
        RuntMenu.add(CompileMenuItem);

        TokenizedMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        TokenizedMenuItem.setText("Show Tokenized Code");
        TokenizedMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TokenizedMenuItemActionPerformed(evt);
            }
        });
        RuntMenu.add(TokenizedMenuItem);

        ExecuteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        ExecuteMenuItem.setText("Execute Code");
        ExecuteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteMenuItemActionPerformed(evt);
            }
        });
        RuntMenu.add(ExecuteMenuItem);

        jMenuBar1.add(RuntMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(TabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TokenizerTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(TokenizerTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        TabbedPane.getAccessibleContext().setAccessibleName("Untitled Tab");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public JTextArea getTextArea(){
        return CodeEditorTxtArea;
    }
    
    public JTabbedPane createNewTab(String tabName){
        JTextArea NewTabTxtArea = new JTextArea();
        JScrollPane NewScrollPane = new JScrollPane(NewTabTxtArea);
        
        TabbedPane.addTab(tabName, NewScrollPane);
        CodeEditorTxtArea = NewTabTxtArea;
        
        return TabbedPane;
    }
    
    public void getTextFromEditor(){
        CodeEditorScrollPane = (JScrollPane)TabbedPane.getSelectedComponent();
        JViewport jview = (JViewport)CodeEditorScrollPane.getComponent(0);
        CodeEditorTxtArea = (JTextArea)jview.getComponent(0);
    }
    
    public void savingFile(){
        String fileName;
        String editorTxt;
        tabInd = TabbedPane.getSelectedIndex();
        getTextFromEditor();
        
        JFileChooser sf = new JFileChooser();
        sf.setCurrentDirectory(new File(filePath));
        
        sf.setSelectedFile(new File("Untitled.iol"));
        sf.showSaveDialog(this);
//        File fl = new File(sf.getSelectedFile()+".iol");
        File f = new File(sf.getSelectedFile().toString());
        
        //OVERWRITES A FILE IF IT ALREADY EXISTS
        if(f.exists()){
            int overwrite = JOptionPane.showConfirmDialog(null, "File already exists."
                    + "Overwrite file?", "Confirm", 
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(overwrite != JOptionPane.YES_OPTION){
                return;
            }
        }

        try{
            //gets tab title
            FileWriter fw = new FileWriter(f);
            editorTxt = CodeEditorTxtArea.getText();
            fw.write(editorTxt);
            fileName = f.getName();
            TabbedPane.setTitleAt(tabInd, fileName);
            fw.close();
        }catch(IOException e){}        
    }
        
    private void FileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FileMenuActionPerformed

    private void OpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuItemActionPerformed
        // TODO add your handling code here:
        int returnVal = openFile.showOpenDialog(this);
        String fName;
        
        switch(returnVal){
            case JFileChooser.CANCEL_OPTION:
                break;
            
            case JFileChooser.APPROVE_OPTION:
                File f = openFile.getSelectedFile();
                fName = f.getName();
                
                if(f.getName().toLowerCase().endsWith(".iol")){
                    try{
                        filePath = f.getCanonicalPath();
                        createNewTab(fName);
                        BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
                        
                        CodeEditorTxtArea.read(in, evt);
                    } catch(IOException ex){}
                }else{
                    JOptionPane.showMessageDialog(null, "File type not compatible.");
                }
                break;
        }
    }//GEN-LAST:event_OpenMenuItemActionPerformed

    private void NewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewMenuItemActionPerformed
        // TODO add your handling code here:
        String tabTitle = "Untitled Tab";
        createNewTab(tabTitle);
    }//GEN-LAST:event_NewMenuItemActionPerformed
    
    private void SaveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsMenuItemActionPerformed
        // TODO add your handling code here:
        savingFile();
    }//GEN-LAST:event_SaveAsMenuItemActionPerformed

    private void SaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuItemActionPerformed
        // TODO add your handling code here:
        savingFile();
    }//GEN-LAST:event_SaveMenuItemActionPerformed

    private void CloseTabMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseTabMenuItemActionPerformed
        // TODO add your handling code here:
        Component selectedTab = TabbedPane.getSelectedComponent();
        if(selectedTab != null){
            TabbedPane.remove(selectedTab);
        }
    }//GEN-LAST:event_CloseTabMenuItemActionPerformed

    private void CompileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompileMenuItemActionPerformed
        // TODO add your handling code here:
        //Compiles source code in text editor
        //executes lexical analysis (output file containing the stream of tokens, display of errors founf
        //syntax analysis and analysis of static semantics: display of errors found
        //TRY TO PUT THIS IN A METHOD
        String[] readLines = readTextArea();
        List<String> list = new ArrayList<>();
//        Collections.addAll(list, readLines);
        Stack<String> stacks = new Stack<>();
        
        String delim = " ";
        String str = String.join(delim, readLines);
        
        String words[] = str.split("\\s+");
        int arrLength = words.length;
        list = ErrorChecker.stringArr(words, ConsoleTxtArea);
        
        List<String> ERR_LEX = new ArrayList<>();
//        int ctr = 1;
//        while(ctr < list.size()-1){
//             
//           String newStr = list.get(ctr).trim();
//           System.out.println("newStr " + newStr);
//           ERR_LEX = ErrorChecker.getTokens(newStr, var, AllOPR, ConsoleTxtArea);
//           ctr++;
//        }
        tokenizer(words, ERR_LEX);
    }//GEN-LAST:event_CompileMenuItemActionPerformed
 
    private void ExecuteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteMenuItemActionPerformed
        // TODO add your handling code here:
        //Executes compiled source code in editor area
        ConsoleTxtArea.setText("");
        String[] sentenceLines = readTextArea();
        String output;
        
        //Arrays, Lists, Arraylists, Stack, Hashmaps DECLARATIONS START--------------------------------
        String[] DT = new String[]{"INT","STR"}; //datatypes
        List<String> AllDT = Arrays.asList(DT);
        
        ArrayList<Integer> val = new ArrayList<>();//list of int assigned values
        ArrayList<String> sval = new ArrayList<>();//list of string assigned values
        ArrayList<String> svar = new ArrayList<>(); //list of string variables
        ArrayList<String> ivar = new ArrayList<>(); //list of integer variables
        
        Stack<String> ArithOPR = new Stack<>();
        
        HashMap<String,Integer> varval = new HashMap<>();//hashmap for (varname, assigned value)
        HashMap<String,String> svarval = new HashMap<>();//hasmap for (varname, assgined value)
        HashMap<String, ArrayList<String>> dtsvarval = new HashMap<>(); //hashmap for varnames and their corresponding data type
        
        ArrayList<String> inputlines = new ArrayList<>();
        ArrayList <ArrayList<String>> PWord=new ArrayList <>();//per word 
        //DECLARATIONS END------------------------------
        
        int i = 0;
        while(i != sentenceLines.length){
            inputlines.add(sentenceLines[i]);
            i++;
        }
        //FOR LOOP that reads every word in every line (element) in inputLines arraylist
        for(int a=0; a < inputlines.size(); a++){
            //save per word in a line
            String woo[] = inputlines.get(a).split("\\s+");
            ArrayList <String> perword = new ArrayList <>();

            perword.addAll(Arrays.asList(woo));
            PWord.add(perword);//Main arraylist
        }
        
        //FOR LOOP - reads every line and read every word inside line
        for(int a=0; a < inputlines.size(); a++){
            int b = 0;
            
            //WHILE LOOP for every word read
            while(PWord.get(a).size() > b) {
                //DEFINING VARIABLES
                //INT/STR read
                ArrayList<String> readWord = PWord.get(a);
                
                if(!AllDT.contains(readWord.get(b))){
                    //Enters function that reads words that are: NEWLN, IS, INTO, BEG, PRINT
                    output = ExecuteFunctions.ProgramOperations(ArithOPR, AllOPR, readWord, b, var, dtsvarval, sval, svarval, val, varval);
                    ConsoleTxtArea.append(output);
                }
                else{
                    //Checks variable datatypes
                    ExecuteFunctions.CheckDataType(readWord, b, var, dtsvarval, sval, svar, svarval, val, ivar, varval);
                }
                
                //---DO NOT REMOVE---
                if(readWord.size()!=b){
                    b++;
                } else break;   
            }
        }
        
    }//GEN-LAST:event_ExecuteMenuItemActionPerformed

    private void TokenizedMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TokenizedMenuItemActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_TokenizedMenuItemActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IOL_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IOL_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IOL_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IOL_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new IOL_GUI().setVisible(true);
            LineNumberSetter(CodeEditorTxtArea, jScrollPane1);
        });
        
    }
    
    public String[] readTextArea(){
        //FUNCTION READS LINES IN TEXT AREA
        String[] sentenceLines = null;  
        
        //CHECKS IF THERE IS TEXT IN CODEEDITOR TO COMPILE
        JTextArea ExecTextArea = (JTextArea)(((JScrollPane)TabbedPane.getComponent(tabInd)).getViewport()).getComponent(0);
        if(ExecTextArea.getText().trim().isEmpty() == false){
            sentenceLines = CodeEditorTxtArea.getText().split("\\n");
        }
        else{
            JOptionPane.showMessageDialog(null, "Nothing to Compile.");
        }
        return sentenceLines;
    }
    
    public static void LineNumberSetter(JTextArea SetLineNumber, JScrollPane SetScrollPane){
        LineNumberingForEditor lineNumberingTextArea = new LineNumberingForEditor(SetLineNumber);
        SetScrollPane.setRowHeaderView(lineNumberingTextArea);

        SetLineNumber.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent documentEvent){
                lineNumberingTextArea.updateLineNumbers();
            }

            @Override
            public void removeUpdate(DocumentEvent documentEvent){
                lineNumberingTextArea.updateLineNumbers();
            }

            @Override
            public void changedUpdate(DocumentEvent documentEvent){
                lineNumberingTextArea.updateLineNumbers();
            }
        });
    }
    
    public void tokenizer(String[] words, List<String> ERR_LEX){
        //loops through sentenclines
        ArrayList<String> Keywords = new ArrayList<>(); 
        ArrayList<String> IDENT = new ArrayList<>();
        
        HashMap<String, String> VarAndVal = new HashMap<>();
        
        DefaultTableModel TknTable = (DefaultTableModel)TokenTable.getModel();
        DefaultTableModel VarValTable = (DefaultTableModel)VariableTable.getModel();
        Object tokenRow[] = new Object[2];
        Object varRow[] = new Object[2];
        
        TknTable.setRowCount(0); //removes all rows of previous tokenized code
        VarValTable.setRowCount(0);
        
        for(int a = 0; a < words.length; a++){
            int b = 0;
             
            if(words[a].isEmpty()){
                //do nothing
            }
            //IF WORD READ IS A KEYWORD
            else if(AllLexemes.contains(words[a]) && Keywords.contains(words[a]) == false){
                    Keywords.add(words[a]);
                    tokenRow[0] = words[a];   //STORES varname
                    tokenRow[1] = words[a];   //store vartype
                    TknTable.addRow(tokenRow);
            }
            //If word read is not a keyword, is a variable, and is not a 'preTokens' (keywords with error)
            else if(Keywords.contains(words[a]) == false && isVar(words[a]) && ERR_LEX.contains(words[a]) == false){
                if(IDENT.contains(words[a]) == false){
                    if(words[a-1].equals("STR")){
                        VarAndVal.put(words[a], "");
                        varRow[0] = words[a];
                        varRow[1] = VarAndVal.get(words[a]);
                        VarValTable.addRow(varRow);
                    }
                    IDENT.add(words[a]);
                    tokenRow[0] = words[a];
                    tokenRow[1] = "IDENT";
                    TknTable.addRow(tokenRow);
                }
            }
            //IF WORD READ IS INTEGER
            else if(isInteger(words[a])==true){
                //INT(a-3) IDENT(a-2) IS(a-1) INT_LIT(a)
                if(IDENT.contains(words[a-2]) && words[a-3].equals("INT")){
                    VarAndVal.put(words[a-2], words[a]);
                    varRow[0] = words[a-2];
                    varRow[1] = VarAndVal.get(words[a-2]);
                    VarValTable.addRow(varRow);
                }
                tokenRow[0] = words[a];
                tokenRow[1] = "INT_LIT";
                TknTable.addRow(tokenRow);
            } 
            else if (ERR_LEX.contains(words[a])){
                tokenRow[0] = words[a];
                tokenRow[1] = "ERR_LEX";
                TknTable.addRow(tokenRow);
            }
            if(words.length != b){
                b++;
            } else break;   
        }
        
        
    }
    
    //FUNCTIONS BELOW DEALS WITH CODE EXECUTION
    static boolean checkSpecialChar(char ch) {
        char[] specialCh = {'!','@',']','#','$','%','^','&','*','-','.'}; 
        
        for (Character c : specialCh) {
            if (ch == c) return true;
        }
        return false;
    }
    
    public static boolean isInteger(String str) {
        int flag=1;
        if (str == null) return false;
        
        int length = str.length();
        if (length == 0) return false;
        
        int i = 0;
        if (str.charAt(0) == '-') {
            if (length == 1) return false;
            i = 1;
        }
        for (; i < length; i++) {
            char c = str.charAt(i);

            if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')||c == '.'||checkSpecialChar(c)==true) {
                flag=0;
            }
        }
        return flag != 0;
    } 
    
    public static boolean isVar(String str) {
        int i = 1;
  
        if(checkSpecialChar(str.charAt(0)) == false && (str.charAt(0) >= 'a' || str.charAt(0) <= 'z'|| 
                str.charAt(0)>= 'A' || str.charAt(0) <= 'Z')&&!(str.charAt(0) == '0' || str.charAt(0) <= '9')){
            for (; i < str.length(); i++) {
                char c = str.charAt(i);
                
                if (c >= '0' || c <= '9'||c >= 'a' || c <= 'z'|| c >= 'A' || c <= 'Z') {
                    if(i==str.length()-1) return true;
                }
                if(checkSpecialChar(c)==true) return false;
             }
        }
        else return false;
        return false;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CloseTabMenuItem;
    private static javax.swing.JTextArea CodeEditorTxtArea;
    private javax.swing.JMenuItem CompileMenuItem;
    private static javax.swing.JTextArea ConsoleTxtArea;
    private javax.swing.JMenuItem ExecuteMenuItem;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem NewMenuItem;
    private javax.swing.JMenuItem OpenMenuItem;
    private javax.swing.JMenu RuntMenu;
    private javax.swing.JMenuItem SaveAsMenuItem;
    private javax.swing.JMenuItem SaveMenuItem;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JTable TokenTable;
    private javax.swing.JMenuItem TokenizedMenuItem;
    private javax.swing.JTabbedPane TokenizerTabbedPane;
    private javax.swing.JTable VariableTable;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private static javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
